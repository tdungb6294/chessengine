@page "/chessroom/{roomId}"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStorage
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text
@using Newtonsoft.Json
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h3>Chess Game Room: @roomId</h3>

@if (room != null)
{
    <div class="roomContainer">
        <div class="roomDataContainer">
            @foreach (var player in room.players)
            {
                <div>
                    Player: @player.username
                    Color: @player.playerColor
                </div>
            }
            <button @onclick="LeaveRoom">Leave Room</button>
            <div style="font-weight: bold">
                Status: @gameStatus
            </div>
            <button @onclick="SaveMatch">Save Match</button>
            <button @onclick="UpdateMatch">Update Match</button>

        </div>
        <ChessBoardMulti roomId="@roomId" flipping="@flipping" room="@room" />
    </div>
}
else
{
    <p>Room not found or you don't have permission to join'.</p>
}

<style>
    .roomContainer {
        display: flex;
    }

    .roomDataContainer {
        display: block;
    }

    @@media screen and (max-width: 720px) {
        .roomContainer {
            display: block;
        }
    }
</style>

@code {
    private int gameId;
    private int flipping;
    [Parameter]
    public string? roomId { get; set; }
    private ChessGame.ChessRoom? room;
    [Inject] public HubConnection? hubConnection { get; set; }
    GameStatus gameStatus { get; set; } = GameStatus.Ongoing;

    protected override async Task OnInitializedAsync()
    {
        if (hubConnection?.State == HubConnectionState.Disconnected)
        {
            await hubConnection.StartAsync();
        }
        hubConnection?.On<ChessGame.ChessRoom>("RoomUpdated", OnReceiveRoom);
        hubConnection?.On<GameStatus>("GameStatusUpdated", async (gameStatus) =>
        {
            await InvokeAsync(() =>
    {
    this.gameStatus = gameStatus; StateHasChanged();
            });
        });
    }

    private async Task OnReceiveRoom(ChessGame.ChessRoom chessRoom)
    {
        await InvokeAsync(() =>
        {
            room = chessRoom;
            StateHasChanged();
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var playerName = await ProtectedSessionStorage.GetAsync<string>("myName");
            if (hubConnection is not null)
            {
                room = await hubConnection.InvokeAsync<ChessGame.ChessRoom?>("IsInRoom", roomId);
                var player = room?.players.FirstOrDefault(pl => pl.username == playerName.Value);
                if (player != null && player.playerColor == PlayerColor.BLACK)
                {
                    flipping = 7;
                }
                else
                {
                    flipping = 0;
                }
                StateHasChanged();
            }
        }
    }

    private async Task LeaveRoom()
    {
        var playerName = await ProtectedSessionStorage.GetAsync<string>("myName");
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("LeaveRoom", roomId);
        }
        NavigationManager.NavigateTo("/chess");
    }

    private async Task SaveMatch()
    {
        string board = "";
        if (hubConnection is not null)
        {
            board = await hubConnection.InvokeAsync<string>("GetBoard", roomId);
        }
        if (room?.players.Count < 2)
        {
            return;
        }
        CreateGameResultDto createGameResultDto = new CreateGameResultDto
            {
                PlayerName1 = room?.players[0].username ?? "",
                PlayerName2 = room?.players[1].username ?? "",
                GameStatus = room?.board?.gameStatus.ToString() ?? "",
                GameBoard = board
            };
        var jsonContent = JsonConvert.SerializeObject(createGameResultDto);
        var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");
        var response = await httpClient.PostAsync(NavigationManager.ToAbsoluteUri("api/gameresults"), content);
        string body = await response.Content.ReadAsStringAsync();
        var deserializedObject = JsonConvert.DeserializeObject<dynamic>(body);
        gameId = deserializedObject?.id;
    }

    private async Task UpdateMatch()
    {
        string board = "";
        if (hubConnection is not null)
        {
            board = await hubConnection.InvokeAsync<string>("GetBoard", roomId);
        }
        UpdateGameResultDto updateGameResultDto = new UpdateGameResultDto
            {
                GameBoard = board,
                Id = gameId
            };
        var jsonContent = JsonConvert.SerializeObject(updateGameResultDto);
        var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");
        var response = await httpClient.PutAsync(NavigationManager.ToAbsoluteUri("api/gameresults"), content);
    }
}
