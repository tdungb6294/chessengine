@inject IJSRuntime JS
@rendermode InteractiveServer


<div class="chessboard">
    <div class="row">
        <div class="coordinate"></div>
        @for (int col = 0; col < 8; col++)
        {
            <div class="coordinate">@((char)('A' + col))</div>
        }
    </div>
    @for (int col = 7; col >= 0; col--)
    {
        <div class="row">
            <div class="coordinate">@((char)('1' + col))</div>
            @for (int row = 0; row < 8; row++)
            {
                int currentRow = row; // Capture current value of row
                int currentCol = col; // Capture current value of col
                <div class="square @(row + col) @GetNeighborColor(Math.Abs(flipping - row),Math.Abs(flipping - col)) @(validMoves?.Contains((Math.Abs(flipping - row),Math.Abs(flipping - col))) ?? false ? "validSquare" : "") "
                    style="cursor: pointer;" @onclick="() => SelectSquare(currentRow, currentCol)">
                    @if (board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)] is Bishop &&
                   board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)]?.PieceColor == PieceColor.White)
                    {
                        <div class="@(selectedPiece == board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)] ? "selected" : "")"
                            style="cursor: pointer;" @onclick="() => Select(currentRow, currentCol)">
                            <img draggable="true" style="width:50px; height: 50px;" src="images/white_bishop.svg" />
                        </div>
                    }
                    else if (board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)] is Knight &&
                    board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)]?.PieceColor == PieceColor.White)
                    {
                        <div class="@(selectedPiece == board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)] ? "selected" : "")"
                            style="cursor: pointer;" @onclick="() => Select(currentRow, currentCol)">
                            <img draggable="true" style="width:50px; height: 50px;" src="images/white_knight.svg" />
                        </div>

                    }
                    else if (board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)] is Rook &&
                    board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)]?.PieceColor == PieceColor.White)
                    {
                        <div class="@(selectedPiece == board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)] ? "selected" : "")"
                            style="cursor: pointer;" @onclick="() => Select(currentRow, currentCol)">
                            <img draggable="true" style="width:50px; height: 50px;" src="images/white_rook.svg" />
                        </div>
                    }
                    else if (board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)] is Queen &&
                    board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)]?.PieceColor == PieceColor.White)
                    {
                        <div class="@(selectedPiece == board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)] ? "selected" : "")"
                            style="cursor: pointer;" @onclick="() => Select(currentRow, currentCol)">
                            <img draggable="true" style="width:50px; height: 50px;" src="images/white_queen.svg" />
                        </div>
                    }
                    else if (board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)] is Pawn &&
                    board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)]?.PieceColor == PieceColor.White)
                    {
                        <div class="@(selectedPiece == board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)] ? "selected" : "")"
                            style="cursor: pointer;" @onclick="() => Select(currentRow, currentCol)">
                            <img draggable="true" style="width:50px; height: 50px;" src="images/white_pawn.svg" />
                        </div>
                    }
                    else if (board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)] is King &&
                    board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)]?.PieceColor == PieceColor.White)
                    {
                        <div class="@(selectedPiece == board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)] ? "selected" : "")"
                            style="cursor: pointer;" @onclick="() => Select(currentRow, currentCol)">
                            <img draggable="true" style="width:50px; height: 50px;" src="images/white_king.svg" />
                        </div>
                    }
                    else @if (board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)] is Bishop &&
            board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)]?.PieceColor == PieceColor.Black)
                    {
                        <div class="@(selectedPiece == board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)] ? "selected" : "")"
                            style="cursor: pointer;" @onclick="() => Select(currentRow, currentCol)">
                            <img draggable="true" style="width:50px; height: 50px;" src="images/black_bishop.svg" />
                        </div>
                    }
                    else if (board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)] is Knight &&
                    board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)]?.PieceColor == PieceColor.Black)
                    {
                        <div class="@(selectedPiece == board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)] ? "selected" : "")"
                            style="cursor: pointer;" @onclick="() => Select(currentRow, currentCol)">
                            <img draggable="true" style="width:50px; height: 50px;" src="images/black_knight.svg" />
                        </div>

                    }
                    else if (board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)] is Rook &&
                    board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)]?.PieceColor == PieceColor.Black)
                    {
                        <div class="@(selectedPiece == board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)] ? "selected" : "")"
                            style="cursor: pointer;" @onclick="() => Select(currentRow, currentCol)">
                            <img draggable="true" style="width:50px; height: 50px;" src="images/black_rook.svg" />
                        </div>
                    }
                    else if (board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)] is Queen &&
                    board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)]?.PieceColor == PieceColor.Black)
                    {
                        <div class="@(selectedPiece == board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)] ? "selected" : "")"
                            style="cursor: pointer;" @onclick="() => Select(currentRow, currentCol)">
                            <img draggable="true" style="width:50px; height: 50px;" src="images/black_queen.svg" />
                        </div>
                    }
                    else if (board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)] is Pawn &&
                    board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)]?.PieceColor == PieceColor.Black)
                    {
                        <div class="@(selectedPiece == board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)] ? "selected" : "")"
                            style="cursor: pointer;" @onclick="() => Select(currentRow, currentCol)">
                            <img draggable="true" style="width:50px; height: 50px;" src="images/black_pawn.svg" />
                        </div>
                    }
                    else if (board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)] is King &&
                    board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)]?.PieceColor == PieceColor.Black)
                    {
                        <div class="@(selectedPiece == board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)] ? "selected" : "")"
                            style="cursor: pointer;" @onclick="() => Select(currentRow, currentCol)">
                            <img draggable="true" style="width:50px; height: 50px;" src="images/black_king.svg" />
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>

@code {
    private int flipping = 0;
    private ChessAI.ChessBot chessBot = new ChessAI.ChessBot();
    private PlayerColor playerColor = PlayerColor.WHITE;
    private Piece? selectedPiece { get; set; }
    private (int x, int y) selectedPos;
    private bool isSelected = false;
    Board board = new Board();
    List<(int x, int y)>? validMoves = new List<(int x, int y)>();

    private async Task Select(int row, int col)
    {
        if (selectedPiece?.PieceColor != board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)]?.PieceColor)
        {
            await SelectSquare(row, col);
        }
        selectedPos.x = Math.Abs(flipping - row);
        selectedPos.y = Math.Abs(flipping - col);
        selectedPiece = board.pieces[Math.Abs(flipping - row)][Math.Abs(flipping - col)];
        validMoves = selectedPiece?.GetValidMoves(board, (Math.Abs(flipping - row), Math.Abs(flipping - col)));
        isSelected = !isSelected;
    }

    private async Task SelectSquare(int row, int col)
    {
        if (validMoves?.Contains((Math.Abs(flipping - row), Math.Abs(flipping - col))) ?? false && isSelected)
        {
            board.MakeMove(selectedPos.x, selectedPos.y, Math.Abs(flipping - row), Math.Abs(flipping - col));
            validMoves.Clear();
            selectedPiece = null;
            isSelected = !isSelected;
            StateHasChanged();
            await BotMakesMove();
        }
    }

    private async Task BotMakesMove()
    {
        Move? bestMove = await chessBot.EvaluateMove(board);
        board.DisplayMoveLog();
        Console.WriteLine($"Best move ({bestMove?.x} {bestMove?.y}) to ({bestMove?.tX}, {bestMove?.tY})");
        if (bestMove is not null)
        {
            board.MakeMove(bestMove.x, bestMove.y, bestMove.tX, bestMove.tY);
        }
        board.DisplayMoveLog();
        StateHasChanged();
    }

    // Method to get color for neighboring cells
    private string GetNeighborColor(int row, int col)
    {
        if ((row + col) % 2 == 0)
        {
            return "light";
        }
        else
        {
            return "dark";
        }
    }
}

<style>
    .chessboard {
        min-width: 450px;
        min-height: 450px;
        display: flex;
        flex-direction: column;
    }

    .row {
        display: flex;
    }

    .coordinate {
        width: 50px;
        height: 50px;
        line-height: 50px;
        text-align: center;
    }

    .square {
        width: 50px;
        height: 50px;
        border: 1px solid black;
        padding: 0;
    }

    .light {
        background-color: #eaeaea;
        /* Light color */
    }

    .dark {
        background-color: #969696;
        /* Dark color */
    }

    .square:hover {
        background-color: lightgray;
    }

    .selected {
        background-color: aqua;
    }

    .validSquare {
        background-color: green;
    }
</style>
