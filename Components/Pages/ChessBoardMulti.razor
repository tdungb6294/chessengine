@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@inject IJSRuntime JS
@rendermode InteractiveServer

@if (board != null)
{
    <div class="chessboard">
        <div class="row">
            <div class="coordinate"></div>
            @for (int col = 0; col < 8; col++)
            {
                <div class="coordinate">@((char)('A' + col))</div>
            }
        </div>
        @for (int col = 7; col >= 0; col--)
        {
            <div class="row">
                <div class="coordinate">@((char)('1' + col))</div>
                @for (int row = 0; row < 8; row++)
                {
                    int currentRow = row; // Capture current value of row
                    int currentCol = col; // Capture current value of col
                    <div class="square @(row + col) @GetNeighborColor(row, col) @(validMoves?.Contains((row, col)) ?? false ? "validSquare" : "") "
                        style="cursor: pointer;" @onclick="() => SelectSquare(currentRow, currentCol)">
                        @if (board.pieces[row][col] is Bishop && board.pieces[row][col]?.PieceColor == PieceColor.White)
                        {
                            <div class="@(selectedPiece == board.pieces[row][col] ? "selected" : "")" style="cursor: pointer;"
                                @onclick="() => Select(currentRow, currentCol)">
                                <img draggable="true" style="width:50px; height: 50px;" src="images/white_bishop.svg" />
                            </div>
                        }
                        else if (board.pieces[row][col] is Knight && board.pieces[row][col]?.PieceColor == PieceColor.White)
                        {
                            <div class="@(selectedPiece == board.pieces[row][col] ? "selected" : "")" style="cursor: pointer;"
                                @onclick="() => Select(currentRow, currentCol)">
                                <img draggable="true" style="width:50px; height: 50px;" src="images/white_knight.svg" />
                            </div>

                        }
                        else if (board.pieces[row][col] is Rook && board.pieces[row][col]?.PieceColor == PieceColor.White)
                        {
                            <div class="@(selectedPiece == board.pieces[row][col] ? "selected" : "")" style="cursor: pointer;"
                                @onclick="() => Select(currentRow, currentCol)">
                                <img draggable="true" style="width:50px; height: 50px;" src="images/white_rook.svg" />
                            </div>
                        }
                        else if (board.pieces[row][col] is Queen && board.pieces[row][col]?.PieceColor == PieceColor.White)
                        {
                            <div class="@(selectedPiece == board.pieces[row][col] ? "selected" : "")" style="cursor: pointer;"
                                @onclick="() => Select(currentRow, currentCol)">
                                <img draggable="true" style="width:50px; height: 50px;" src="images/white_queen.svg" />
                            </div>
                        }
                        else if (board.pieces[row][col] is Pawn && board.pieces[row][col]?.PieceColor == PieceColor.White)
                        {
                            <div class="@(selectedPiece == board.pieces[row][col] ? "selected" : "")" style="cursor: pointer;"
                                @onclick="() => Select(currentRow, currentCol)">
                                <img draggable="true" style="width:50px; height: 50px;" src="images/white_pawn.svg" />
                            </div>
                        }
                        else if (board.pieces[row][col] is King && board.pieces[row][col]?.PieceColor == PieceColor.White)
                        {
                            <div class="@(selectedPiece == board.pieces[row][col] ? "selected" : "")" style="cursor: pointer;"
                                @onclick="() => Select(currentRow, currentCol)">
                                <img draggable="true" style="width:50px; height: 50px;" src="images/white_king.svg" />
                            </div>
                        }
                        else @if (board.pieces[row][col] is Bishop && board.pieces[row][col]?.PieceColor == PieceColor.Black)
                        {
                            <div class="@(selectedPiece == board.pieces[row][col] ? "selected" : "")" style="cursor: pointer;"
                                @onclick="() => Select(currentRow, currentCol)">
                                <img draggable="true" style="width:50px; height: 50px;" src="images/black_bishop.svg" />
                            </div>
                        }
                        else if (board.pieces[row][col] is Knight && board.pieces[row][col]?.PieceColor == PieceColor.Black)
                        {
                            <div class="@(selectedPiece == board.pieces[row][col] ? "selected" : "")" style="cursor: pointer;"
                                @onclick="() => Select(currentRow, currentCol)">
                                <img draggable="true" style="width:50px; height: 50px;" src="images/black_knight.svg" />
                            </div>

                        }
                        else if (board.pieces[row][col] is Rook && board.pieces[row][col]?.PieceColor == PieceColor.Black)
                        {
                            <div class="@(selectedPiece == board.pieces[row][col] ? "selected" : "")" style="cursor: pointer;"
                                @onclick="() => Select(currentRow, currentCol)">
                                <img draggable="true" style="width:50px; height: 50px;" src="images/black_rook.svg" />
                            </div>
                        }
                        else if (board.pieces[row][col] is Queen && board.pieces[row][col]?.PieceColor == PieceColor.Black)
                        {
                            <div class="@(selectedPiece == board.pieces[row][col] ? "selected" : "")" style="cursor: pointer;"
                                @onclick="() => Select(currentRow, currentCol)">
                                <img draggable="true" style="width:50px; height: 50px;" src="images/black_queen.svg" />
                            </div>
                        }
                        else if (board.pieces[row][col] is Pawn && board.pieces[row][col]?.PieceColor == PieceColor.Black)
                        {
                            <div class="@(selectedPiece == board.pieces[row][col] ? "selected" : "")" style="cursor: pointer;"
                                @onclick="() => Select(currentRow, currentCol)">
                                <img draggable="true" style="width:50px; height: 50px;" src="images/black_pawn.svg" />
                            </div>
                        }
                        else if (board.pieces[row][col] is King && board.pieces[row][col]?.PieceColor == PieceColor.Black)
                        {
                            <div class="@(selectedPiece == board.pieces[row][col] ? "selected" : "")" style="cursor: pointer;"
                                @onclick="() => Select(currentRow, currentCol)">
                                <img draggable="true" style="width:50px; height: 50px;" src="images/black_king.svg" />
                            </div>
                        }
                    </div>
                }
            </div>
        }
    </div>
}

@code {
    [Inject] public HubConnection? hubConnection { get; set; }
    private Piece? selectedPiece { get; set; }
    private (int x, int y) selectedPos;
    private bool isSelected = false;
    [Parameter]
    public string roomId { get; set; }
    public Board board { get; set; }
    List<(int x, int y)>? validMoves = new List<(int x, int y)>();

    private void Select(int row, int col)
    {
        if (selectedPiece?.PieceColor != board.pieces[row][col]?.PieceColor)
        {
            SelectSquare(row, col);
        }
        selectedPos.x = row;
        selectedPos.y = col;
        selectedPiece = board.pieces[row][col];
        validMoves = selectedPiece?.GetValidMoves(board, (row, col));
        isSelected = !isSelected;
    }

    private async Task SelectSquare(int row, int col)
    {
        if (validMoves?.Contains((row, col)) ?? false && isSelected)
        {
            if (hubConnection is not null)
            {
                try
                {
                    await hubConnection.InvokeAsync<string>("MakeMove", roomId, selectedPos.x, selectedPos.y, row, col);
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex);
                }
            }
            validMoves.Clear();
            selectedPiece = null;
            isSelected = !isSelected;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (hubConnection?.State == HubConnectionState.Disconnected)
        {
            await hubConnection.StartAsync();
        }
        hubConnection.On<string>("BoardUpdated", OnReceiveBoard);

        string json = await hubConnection.InvokeAsync<string>("GetBoard", roomId);
        convertJsonToBoard(json);
    }

    private void convertJsonToBoard(string json)
    {
        PieceColor color;
        bool hasMoved;
        board = JsonConvert.DeserializeObject<Board>(json);
        for (int i = 0; i < 8; i++)
        {
            for (int j = 0; j < 8; j++)
            {
                switch (board.pieces[i][j]?.PieceType)
                {
                    case PieceType.Pawn:
                        color = board.pieces[i][j].PieceColor;
                        hasMoved = board.pieces[i][j].hasMoved;
                        board.pieces[i][j] = new Pawn(color);
                        board.pieces[i][j].hasMoved = hasMoved;
                        break;
                    case PieceType.Knight:
                        color = board.pieces[i][j].PieceColor;
                        hasMoved = board.pieces[i][j].hasMoved;
                        board.pieces[i][j] = new Knight(color);
                        board.pieces[i][j].hasMoved = hasMoved;
                        break;
                    case PieceType.Bishop:
                        color = board.pieces[i][j].PieceColor;
                        hasMoved = board.pieces[i][j].hasMoved;
                        board.pieces[i][j] = new Bishop(color);
                        board.pieces[i][j].hasMoved = hasMoved;
                        break;
                    case PieceType.Rook:
                        color = board.pieces[i][j].PieceColor;
                        hasMoved = board.pieces[i][j].hasMoved;
                        board.pieces[i][j] = new Rook(color);
                        board.pieces[i][j].hasMoved = hasMoved;
                        break;
                    case PieceType.Queen:
                        color = board.pieces[i][j].PieceColor;
                        hasMoved = board.pieces[i][j].hasMoved;
                        board.pieces[i][j] = new Queen(color);
                        board.pieces[i][j].hasMoved = hasMoved;
                        break;
                    case PieceType.King:
                        color = board.pieces[i][j].PieceColor;
                        hasMoved = board.pieces[i][j].hasMoved;
                        board.pieces[i][j] = new King(color);
                        board.pieces[i][j].hasMoved = hasMoved;
                        break;
                }
            }
        }
    }

    private async Task OnReceiveBoard(string json)
    {
        await InvokeAsync(() =>
        {
            convertJsonToBoard(json);
            StateHasChanged();
        });
    }


    // Method to get color for neighboring cells
    private string GetNeighborColor(int row, int col)
    {
        if ((row + col) % 2 == 0)
        {
            return "light";
        }
        else
        {
            return "dark";
        }
    }
}

<style>
    .chessboard {
        min-width: 450px;
        min-height: 450px;
        display: flex;
        flex-direction: column;
    }

    .row {
        display: flex;
    }

    .coordinate {
        width: 50px;
        height: 50px;
        line-height: 50px;
        text-align: center;
    }

    .square {
        width: 50px;
        height: 50px;
        border: 1px solid black;
        padding: 0;
    }

    .light {
        background-color: #eaeaea;
        /* Light color */
    }

    .dark {
        background-color: #969696;
        /* Dark color */
    }

    .square:hover {
        background-color: lightgray;
    }

    .selected {
        background-color: aqua;
    }

    .validSquare {
        background-color: green;
    }
</style>
