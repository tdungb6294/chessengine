@page "/chess"
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.SignalR.Client;
@rendermode InteractiveServer
@inject ProtectedSessionStorage ProtectedSessionStore

<PageTitle>Chess rooms</PageTitle>
<h3>Chess rooms</h3>

<div>
    Room Name: <input type="text" @bind="roomName" />
    <button @onclick="CreateRoom">Create</button>
    @if (message != null)
    {
        <div class="invalid-feedback">@message</div>
        <small id="emailHelp" class="form-text text-muted">@message</small>
    }
</div>
<div>
    Player Name: <input type="text" @bind="playerName" />
    <button @onclick="SaveUsername">Save</button>
    @if (message != null)
    {
        <div class="invalid-feedback">@message</div>
        <small id="emailHelp" class="form-text text-muted">@message</small>
    }
</div>


@if (rooms == null)
{
    <div class="chessRoomListContainer">
        <p>Loading rooms...</p>
    </div>
}
else if (rooms.Count == 0)
{
    <div class="chessRoomListContainer">
        <p>Loading rooms...</p>
    </div>
}
else
{
    <div class="chessRoomListContainer">
        @foreach (var room in rooms)
        {
            <Chess.Components.Pages.ChessRoom.ChessRoom chessRoomData="@room" hubConnection="@hubConnection"
                playerName="@playerName" />
        }
    </div>
}

<style>
    .chessRoomListContainer {
        margin-top: 20px;
    }
</style>

@code {
    private HubConnection? hubConnection;
    private string? roomName;
    private string? message;
    private string? playerName;
    private List<ChessGame.ChessRoom> rooms = new List<ChessGame.ChessRoom>();
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri(ChessHub.HubUrl))
        .Build();

        await hubConnection.StartAsync();

        await LoadRooms();

        hubConnection.On<ChessGame.ChessRoom>("ReceiveRoom", OnReceiveRoom);
    }

    private async Task OnReceiveRoom(ChessGame.ChessRoom chessRoom)
    {
        await InvokeAsync(() =>
        {
            rooms.Add(chessRoom);
            StateHasChanged();
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var playerNameGet = await ProtectedSessionStore.GetAsync<string>("myName");
            playerName = playerNameGet.Value;
        }
    }

    private async Task CreateRoom()
    {
        if (hubConnection is not null)
        {
            string roomId = await hubConnection.InvokeAsync<string>("CreateRoom", roomName);
        }
    }

    private async Task LoadRooms()
    {
        if (hubConnection is not null)
        {
            rooms = await hubConnection.InvokeAsync<List<ChessGame.ChessRoom>>("GetRooms");
            StateHasChanged();
        }
    }

    private async Task SaveUsername()
    {
        await ProtectedSessionStore.SetAsync("myName", playerName ?? "");
    }
}